# Default values for synapse-launchpad
# This is a YAML-formatted file.

# Global settings
global:
  environment: production
  domain: synapse-launchpad.com
  imageRegistry: ghcr.io
  imageRepository: synapse-launchpad
  imagePullSecrets:
    - name: ghcr-secret

# Frontend service configuration
frontend:
  name: frontend
  replicaCount: 2
  image:
    repository: synapse-launchpad/frontend
    tag: latest
    pullPolicy: Always
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  service:
    type: ClusterIP
    port: 3000
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: synapse-launchpad.com
        paths:
          - path: /
            pathType: Prefix
      - host: www.synapse-launchpad.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: synapse-launchpad-tls
        hosts:
          - synapse-launchpad.com
          - www.synapse-launchpad.com

# API Gateway service configuration
api:
  name: api
  replicaCount: 2
  image:
    repository: synapse-launchpad/api
    tag: latest
    pullPolicy: Always
  resources:
    requests:
      cpu: 1000m
      memory: 1Gi
    limits:
      cpu: 2000m
      memory: 2Gi
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  service:
    type: ClusterIP
    port: 8000
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: api.synapse-launchpad.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: api-synapse-launchpad-tls
        hosts:
          - api.synapse-launchpad.com

# ML Partner Matching service configuration
partnerRecommender:
  name: partner-recommender
  replicaCount: 1
  image:
    repository: synapse-launchpad/partner-recommender
    tag: latest
    pullPolicy: Always
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 4000m
      memory: 8Gi
  gpuEnabled: true
  nodeSelector:
    cloud.google.com/gke-accelerator: nvidia-tesla-t4
  tolerations:
    - key: "nvidia.com/gpu"
      operator: "Exists"
      effect: "NoSchedule"
  resources:
    limits:
      nvidia.com/gpu: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  service:
    type: ClusterIP
    port: 8001

# ML Campaign Generator service configuration
campaignGenerator:
  name: campaign-generator
  replicaCount: 1
  image:
    repository: synapse-launchpad/campaign-generator
    tag: latest
    pullPolicy: Always
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 2000m
      memory: 4Gi
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  service:
    type: ClusterIP
    port: 8002

# Feature Store service configuration
featureStore:
  name: feature-store
  replicaCount: 1
  image:
    repository: synapse-launchpad/feature-store
    tag: latest
    pullPolicy: Always
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 4000m
      memory: 8Gi
  gpuEnabled: true
  nodeSelector:
    cloud.google.com/gke-accelerator: nvidia-tesla-t4
  tolerations:
    - key: "nvidia.com/gpu"
      operator: "Exists"
      effect: "NoSchedule"
  resources:
    limits:
      nvidia.com/gpu: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  service:
    type: ClusterIP
    port: 8003
  grpcService:
    type: ClusterIP
    port: 50051

# Market Pulse Scanner service configuration
marketPulseScanner:
  name: market-pulse-scanner
  replicaCount: 1
  image:
    repository: synapse-launchpad/market-pulse-scanner
    tag: latest
    pullPolicy: Always
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 2Gi
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  service:
    type: ClusterIP
    port: 8004

# Analytics service configuration
analytics:
  name: analytics
  replicaCount: 1
  image:
    repository: synapse-launchpad/analytics
    tag: latest
    pullPolicy: Always
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 2Gi
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  service:
    type: ClusterIP
    port: 8005

# Data Pipeline service configuration
dataPipeline:
  name: data-pipeline
  replicaCount: 1
  image:
    repository: synapse-launchpad/data-pipeline
    tag: latest
    pullPolicy: Always
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 2Gi
  cronJob:
    enabled: true
    schedule: "0 */6 * * *"  # Every 6 hours
  service:
    type: ClusterIP
    port: 8006

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    username: postgres
    existingSecret: synapse-db-credentials
    secretKeys:
      adminPasswordKey: password
  primary:
    persistence:
      size: 20Gi
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi

# Redis configuration
redis:
  enabled: true
  auth:
    existingSecret: synapse-redis-credentials
    existingSecretPasswordKey: password
  master:
    persistence:
      size: 8Gi
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 1000m
        memory: 2Gi

# External Secrets Operator configuration
externalSecrets:
  enabled: true
  secretStore:
    name: twentyfirst-secret-store
    kind: SecretStore
    provider: twentyfirst
  secrets:
    - name: synapse-db-credentials
      refreshInterval: 1h
      data:
        - secretKey: password
          remoteRef:
            key: DATABASE_PASSWORD
    - name: synapse-redis-credentials
      refreshInterval: 1h
      data:
        - secretKey: password
          remoteRef:
            key: REDIS_PASSWORD
    - name: synapse-api-credentials
      refreshInterval: 1h
      data:
        - secretKey: jwt-secret
          remoteRef:
            key: JWT_SECRET
        - secretKey: crunchbase-key
          remoteRef:
            key: CRUNCHBASE_KEY
        - secretKey: linkedin-token
          remoteRef:
            key: LINKEDIN_TOKEN
        - secretKey: newsapi-key
          remoteRef:
            key: NEWSAPI_KEY
        - secretKey: stripe-secret
          remoteRef:
            key: STRIPE_SECRET
        - secretKey: stripe-webhook-secret
          remoteRef:
            key: STRIPE_WEBHOOK_SECRET
    - name: synapse-ai-credentials
      refreshInterval: 1h
      data:
        - secretKey: openai-api-key
          remoteRef:
            key: OPENAI_API_KEY
        - secretKey: nvidia-api-key
          remoteRef:
            key: NVIDIA_API_KEY
    - name: synapse-monitoring-credentials
      refreshInterval: 1h
      data:
        - secretKey: sentry-dsn
          remoteRef:
            key: SENTRY_DSN

# Monitoring configuration
monitoring:
  enabled: true
  prometheus:
    enabled: true
  grafana:
    enabled: true
    adminPassword:
      existingSecret: synapse-monitoring-credentials
      key: grafana-admin-password
  alertmanager:
    enabled: true
    config:
      receivers:
        - name: 'slack'
          slack_configs:
            - channel: '#alerts'
              api_url: '{{ .Values.monitoring.alertmanager.slackApiUrl }}'
      route:
        group_by: ['alertname', 'cluster', 'service']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 3h
        receiver: 'slack'
        routes:
          - match:
              severity: critical
            receiver: 'slack'
  slackApiUrl: ""  # Set this in a values override file