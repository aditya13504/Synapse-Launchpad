name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
        python-version: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm type-check

      - name: Lint
        run: pnpm lint

      - name: Test Frontend
        run: pnpm test --filter=@synapse/web

      - name: Test API
        run: pnpm test --filter=@synapse/api

      - name: Test Python Services
        run: |
          cd services/ml-partner-matching
          pip install -r requirements.txt
          python -m pytest tests/ || true
          
          cd ../ml-campaign-generator
          pip install -r requirements.txt
          python -m pytest tests/ || true

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Start PostgreSQL
        run: docker-compose up -d postgres
      
      - name: Wait for PostgreSQL
        run: sleep 10
      
      - name: Seed test database
        run: cd scripts && python3 seed-database.py --test
      
      - name: Build application
        run: pnpm build
      
      - name: Run Playwright tests
        run: pnpm test:e2e
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build:
    needs: [test, e2e-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker images
        run: |
          docker-compose build
          docker-compose push

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to 21st.dev
        uses: 21st-dev/deploy-action@v1
        with:
          api-key: ${{ secrets.TWENTYFIRST_API_KEY }}
          project-id: ${{ secrets.TWENTYFIRST_PROJECT_ID }}
          docker-compose-file: docker-compose.yml
          environment-variables: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            CRUNCHBASE_API_KEY=${{ secrets.CRUNCHBASE_API_KEY }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}

  notify:
    needs: [test, build, deploy, e2e-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Sentry of deployment
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: synapse-launchpad
          SENTRY_PROJECT: web
        with:
          environment: production
          version: ${{ github.sha }}
      
      - name: Notify Slack on success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Deployment Successful
          SLACK_MESSAGE: 'Synapse LaunchPad has been deployed successfully! :rocket:'
      
      - name: Notify Slack on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: Deployment Failed
          SLACK_MESSAGE: 'Synapse LaunchPad deployment failed! :x:'